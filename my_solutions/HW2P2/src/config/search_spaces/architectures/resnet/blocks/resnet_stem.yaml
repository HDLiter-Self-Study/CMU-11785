# ResNet Stem Configuration
# @package blocks.resnet_stem

# =============================================================================
# RESNET STEM CONFIGURATION
# =============================================================================
# Note: Most parameters (activation, normalization) are handled at the
# architecture level in ResNet main config. Only stem-specific parameters
# are defined here.
#
# STEM PARAMETER MAPPING RULES:
# The stem's activation and normalization parameters are mapped from the main
# ResNet config based on the selected granularity level:
#
# - global:      stem uses resnet_global_activation/normalization
# - stage:       stem uses resnet_global_activation/normalization
#                (stage-specific logic handled in program)
#                (as stage_0)
# - block_type:  stem uses resnet_basic_activation/normalization
#                (stem structure is similar to basic blocks)
# - block_stage: stem uses resnet_basic_activation/normalization
#                (follows block_type logic)
#                (as stage_0)
# Note: The stem does not have its own block_type or stage parameters.
#
# This mapping is implemented in Python code, not in config files.

resnet_stem:
  class: "strategy"

  # Stem-specific parameters
  stem_params:
    class: "technique"
    
    # Output channels for stem (stem-specific parameter)
    out_channels:
      class: "param"
      param_name: "resnet_stem_out_channels"
      type: "categorical"
      choices: [64, 96, 128]
      description: "Number of output channels in stem convolution"
    
    # Whether to use max pooling (stem-specific parameter)
    use_maxpool:
      class: "param"
      param_name: "resnet_stem_use_maxpool"
      type: "categorical"
      choices: [true, false]
      description: "Whether to use max pooling after stem convolutions"
