# Architectures Default Configuration
# @package architectures

defaults:
  - resnet@resnet: main  # Default ResNet configuration
  - convnext@convnext: main  # ConvNeXt configuration (example of easy addition)
  - _self_

# =============================================================================
# STRATEGY LEVELS REFERENCE
# =============================================================================
# Available strategy levels (set manually in strategy_level field):
# - basic: Quick experiments, minimal search space
# - robust: Balanced exploration, recommended for most research  
# - comprehensive: Thorough search, larger parameter ranges
# - custom: Maximum flexibility, all available options

# =============================================================================
# ARCHITECTURE SELECTION STRATEGY
# =============================================================================
architectures:
  class: "strategy"

  # Meta-configuration: manually set by researcher (not searched)
  strategy_level: "robust"  # ["basic", "robust", "comprehensive", "custom"]
  
  # Architecture selection technique (actual hyperparameter search)
  architecture_selection:
    class: "technique"
    
    selection:
      class: "param"
      param_name: "architecture_type"
      type: "categorical"
      dependency_order: ["strategy_level"]
      choices:
        basic: ["resnet"]  
        robust: ["resnet", "convnext"]  
        comprehensive: ["resnet", "convnext"]  
        custom: ["resnet", "convnext"]
      description: "Architecture type selection"

# =============================================================================
# GLOBAL ARCHITECTURE SHAPE PARAMETERS (UPPER LEVEL)
# =============================================================================
global_architecture_params:
  class: "technique"
  
  # Width multiplier (Wide ResNet style - affects all architectures)
  width_multiplier:
    class: "param"
    param_name: "width_multiplier"
    type: "categorical"
    choices: [1, 2, 3, 4, 6, 8, 10, 12, 16, 20]
    description: "Global width multiplier for all channels (Wide ResNet style)"

# =============================================================================
# SHARED MODERN TRAINING FEATURES (ALL ARCHITECTURES)
# =============================================================================
shared_features:
  class: "technique"
  
  # SE (Squeeze-and-Excitation) module configuration - shared by all architectures
  se_params:
    class: "technique"
    
    selection:
      class: "param"
      param_name: "se_selection"
      type: "categorical"
      dependency_order: ["strategy_level"]
      choices:
        basic: ["disabled"]
        robust: ["disabled", "enabled"]
        comprehensive: ["disabled", "enabled"]
        custom: ["disabled", "enabled"]
      description: "Enable/disable Squeeze-and-Excitation modules in blocks"
      
    se_pooling:
      class: "param"
      param_name: "se_pooling"
      type: "categorical"
      choices: ["avg", "max", "skew", "var"]
      description: "Pooling method for SE module squeeze step (ECANet style with Conv1D)"
      condition: "$se_selection == 'enabled'"

  # Layer scale technique - shared by all architectures
  layer_scale:
    class: "technique"
    
    selection:
      class: "param"
      param_name: "layer_scale_selection"
      type: "categorical"
      dependency_order: ["strategy_level"]
      choices:
        basic: ["disabled"]
        robust: ["disabled", "enabled"]
        comprehensive: ["disabled", "enabled"]
        custom: ["disabled", "enabled"]
      description: "Enable/disable layer scale for training stability"
      
    layer_scale_init_value:
      class: "param"
      param_name: "layer_scale_init_value"
      type: "float"
      min: 1e-6
      max: 1e-4
      log_scale: true
      description: "Initial value for layer scale parameters"
      condition: "$layer_scale_selection == 'enabled'"

  # Stochastic depth technique - shared by all architectures
  stochastic_depth:
    class: "technique"
    
    selection:
      class: "param"
      param_name: "stochastic_depth_selection"
      type: "categorical"
      dependency_order: ["strategy_level"]
      choices:
        basic: ["disabled"]
        robust: ["disabled", "enabled"]
        comprehensive: ["disabled", "enabled"]
        custom: ["disabled", "enabled"]
      description: "Enable/disable stochastic depth (DropPath)"
      
    stochastic_depth_prob:
      class: "param"
      param_name: "stochastic_depth_prob"
      type: "float"
      min: 0.0
      max: 0.3
      description: "Stochastic depth (DropPath) probability"
      condition: "$stochastic_depth_selection == 'enabled'"

  # Conv dropout technique - shared by all architectures
  conv_dropout:
    class: "technique"
    
    selection:
      class: "param"
      param_name: "conv_dropout_selection"
      type: "categorical"
      dependency_order: ["strategy_level"]
      choices:
        basic: ["disabled"]
        robust: ["disabled", "enabled"]
        comprehensive: ["disabled", "enabled"]  
        custom: ["disabled", "enabled"]
      description: "Enable/disable dropout between conv layers"
      
    conv_drop_prob:
      class: "param"
      param_name: "conv_drop_prob"
      type: "float"
      min: 0.0
      max: 0.5
      description: "Dropout probability between conv layers"
      condition: "$conv_dropout_selection == 'enabled'"

  # Projection type for shortcut connections - always enabled, just method selection
  projection_params:
    class: "technique"
    
    projection_type:
      class: "param"
      param_name: "projection_type"
      type: "categorical"
      choices: ["conv", "avg_pool", "max_pool"]
      description: "Shortcut projection method when dimensions mismatch"

  # Shared activation and normalization choices - always available
  function_choices:
    class: "technique"
    
    # Merged activation function choices (union of ResNet and ConvNeXt preferences)
    activation_functions:
      class: "param"
      param_name: "activation_choices"
      type: "categorical"
      choices: ["relu", "gelu", "swish", "silu", "leaky_relu", "elu", "mish"]
      description: "Available activation functions for all architectures"
      
    # Merged normalization method choices (balanced for both architectures)
    normalization_methods:
      class: "param"
      param_name: "normalization_choices"
      type: "categorical"
      choices: ["batch_norm", "layer_norm", "group_norm"]
      description: "Available normalization methods for all architectures"

# =============================================================================
# ARCHITECTURE DEPTH GENERATION METHODS (DYNAMIC ARCHITECTURE-AWARE)
# =============================================================================
depth_generation:
  class: "technique"

  # Unified depth generation method selection
  method_selection:
    class: "param"
    param_name: "depth_generation_method"
    type: "categorical"
    dependency_order: ["strategy_level"]
    choices:
      basic: ["regnet_rule"]
      robust: ["regnet_rule"] 
      comprehensive: ["regnet_rule"] 
      custom: ["regnet_rule"]
    description: "Method for generating architecture depth configuration"

  # RegNet-based depth generation (architecture-aware parameters)
  # See <https://arxiv.org/abs/2101.00590> for details
  regnet_rule:
    class: "instance"
    condition: "$depth_generation_method == 'regnet_rule'"

    num_stages:
      class: "param"
      param_name: "regnet_num_stages"
      type: "categorical"
      dependency_order: ["strategy_level"]
      choices:
        basic: [4]  
        robust: [3, 4] 
        comprehensive: [3, 4, 5] 
        custom: [3, 4, 5]
      description: "Number of stages for architecture"

    width_slope:
      class: "param"
      param_name: "regnet_width_slope"
      type: "float"
      min: 1.5 
      max: 4.0
      description: "Width multiplier between stages"

    initial_width:
      class: "param"
      param_name: "regnet_initial_width"
      type: "categorical"
      choices: [16, 24, 32, 48, 64]
      description: "Initial width for depth calculation"

    depth_slope:
      class: "param"
      param_name: "regnet_depth_slope"
      type: "float"
      min: 0.005
      max: 0.08
      description: "Depth generation slope"

    depth_bias:
      class: "param"
      param_name: "regnet_depth_bias"
      type: "float"
      min: -0.5
      max: 2.5
      description: "Depth generation bias"

    # Architecture-aware stage depth limits
    min_stage_depth:
      class: "param"
      param_name: "regnet_min_stage_depth"
      type: "int"
      min: 1
      max: 1
      description: "Minimum depth per stage (typically 1 for all architectures)"

    max_stage_depth:
      class: "param"
      param_name: "regnet_max_stage_depth"
      type: "categorical"
      dependency_order: ["architecture_type"]
      choices:
        # ResNet can handle deeper stages
        resnet: [12]
        # ConvNeXt typically uses fewer blocks per stage
        convnext: [9]
      description: "Maximum depth per stage (architecture-dependent)"

